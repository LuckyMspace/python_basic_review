# 파이썬 리스트

'''영화 제목을 movie_rank 이름의 리스트에 저장''' 
movie_rank = ["닥터 스트레인지", "스플릿", "럭키"]
print(movie_rank) # 결과 : ['닥터 스트레인지', '스플릿', '럭키']

'''movie_rank 리스트에 "배트맨"을 추가 [.append 메서드]'''
movie_rank.append("배트맨")
print(movie_rank) # 결과 : ['닥터 스트레인지', '스플릿', '럭키', '배트맨']

'''movie_rank 리스트에 "슈퍼맨"을 "닥터 스트레인지"와 "스플릿" 사이에 추가 [.insert메서드]'''
movie_rank.insert(1, "슈퍼맨")
print(movie_rank) # 결과 : ['닥터 스트레인지', '슈퍼맨', '스플릿', '럭키', '배트맨']
#list.insert(integar, "arguments")   몇번 째 자리에 삽입할 것인지 integar값을 넣고, 추가할 매개변수를 넣는다.

'''movie_rank 리스트에서 '럭키'를 삭제 [del 함수]'''
del movie_rank[3]
print(movie_rank) # 결과 : ['닥터 스트레인지', '슈퍼맨', '스플릿', '배트맨']
# '럭키'가 3번째에 있으므로 integar값을 3으로 입력하여 리스트 'movie_rank'의 3번째 값을 삭제

'''movie_rank 리스트에서 '스플릿' 과 '배트맨'을 를 삭제'''
# del movie_rank[4,5]
# print(movie_rank) # 결과 : 오류 발생
# del을 이용하여 리스트에서 원소를 삭제할 수 있다. 리스트에서 어떤 값을 삭제하면 남은 값들은 새로 인덱싱된다.
# 따라서 여러 값을 삭제할 때는 어떤 값이 먼저 삭제된 후 남은 원소들에 대해서 순서를 새로 고려한 후 삭제.

del movie_rank[2]
del movie_rank[2]
print(movie_rank) # 결과 : ['닥터 스트레인지', '슈퍼맨']

'''lang1과 lang2 리스트가 있을 때 lang1과 lang2의 원소를 모두 갖고 있는 langs 리스트를 만들기'''

lang1 = ["C", "C++", "JAVA"]
lang2 = ["Python", "Go", "C#"]

langs = lang1 + lang2
print(langs) # 결과 : ['C', 'C++', 'JAVA', 'Python', 'Go', 'C#']

'''다음 리스트에서 최댓값과 최솟값을 출력. (힌트: min(), max() 함수 사용)'''

nums = [1, 2, 3, 4, 5, 6, 7]
'''실행 예:
max:  7
min:  1     '''

print("max: ", max(nums)) # 결과 : max: 7
print("min: ", min(nums)) # 결과 : min: 1

'''다음 리스트의 합을 출력'''

q58 = [1, 2, 3, 4, 5]
print(sum(q58)) # 결과 : 15

'''다음 리스트에 저장된 데이터의 개수 구하기'''

cook = ["피자", "김밥", "만두", "양념치킨", "족발", "피자", "김치만두", "쫄면", "소시지", "라면", "팥빙수", "김치전"]

print(len(cook)) # 결과 : 12

'''다음 리스트의 평균을 출력. '''

q60 = [1, 2, 3, 4, 5]
print(average(q60))
average = sum(q60) / len(q60)
print(average) # 결과 : 3.0

# 정수로 표현하고 싶을 때
print(int(average)) # 결과 : 3

'''price 변수에는 날짜와 종가 정보가 저장돼 있다. 날짜 정보를 제외하고 가격 정보만을 출력. (힌트 : 슬라이싱)'''

price = ['20180728', 100, 130, 140, 150, 160, 170]
# 출력 예시:
# [100, 130, 140, 150, 160, 170]'''

print(price[1:]) # 결과 : [100, 130, 140, 150, 160, 170]

'''슬라이싱을 사용해서 홀수만 출력'''

q62 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# 실행 예:
# [1, 3, 5, 7, 9]
print(q62[0:11:2]) # 결과 : [1, 3, 5, 7, 9]
print(q62[::2]) # 결과 : [1, 3, 5, 7, 9]
# 둘의 결과는 같다. 첫번째 print문과 두번째 print문의 차이는 범위를 지정했느냐 안했느냐의 차이.

'''슬라이싱을 사용해서 리스트의 숫자를 역 방향으로 출력.'''

q64 = [1, 2, 3, 4, 5]
print(q64[::-1]) # 결과 : [5, 4, 3, 2, 1]

'''interest 리스트에는 아래의 데이터가 바인딩되어 있다 .interest 리스트를 사용하여 아래와 같이 화면에 출력'''
# 출력 예시:
# 삼성전자 Naver

interest = ['삼성전자', 'LG전자', 'Naver']
print(interest[0],interest[2]) # 결과 : 삼성전자 Naver

'''interest 리스트에는 아래의 데이터가 바인딩되어 있다. interest 리스트를 사용하여 아래와 같이 화면에 출력.[join메서드]'''

q66 = ['삼성전자', 'LG전자', 'Naver', 'SK하이닉스', '미래에셋대우']

# 출력 예시:
# 삼성전자 LG전자 Naver SK하이닉스 미래에셋대우

print(" ".join(interest)) # 결과 : 삼성전자 LG전자 Naver SK하이닉스 미래에셋대우
# ','로 구분되어 출력되던 리스트가 join메서드를 사용하면 각 데이터마다 " "(공백)으로 구분되어 출력된다.
# 구분기준을 먼저 입력하고 .join을 붙인다.

'''('/')로 구분되어 하나의 문자열로 저장되어 있다. 이를 q69 이름의 리스트로 분리 저장. [split 메서드]'''

q69 = "삼성전자/LG전자/Naver"

# 실행 예시
# ['삼성전자', 'LG전자', 'Naver']

q69_1 = q69.split("/")
print(q69_1) # 결과 : ['삼성전자', 'LG전자', 'Naver']

# 

'''리스트에 있는 값을 오름차순으로 정렬 [sort 메서드]'''

data = [2, 4, 3, 1, 5, 10, 9]
data.sort()
print(data) # 결과 : [1, 2, 3, 4, 5, 9, 10]
